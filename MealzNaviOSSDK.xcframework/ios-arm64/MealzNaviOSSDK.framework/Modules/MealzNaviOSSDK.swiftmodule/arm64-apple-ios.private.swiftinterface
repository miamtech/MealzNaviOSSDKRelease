// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios17.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MealzNaviOSSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreGraphics
import Foundation
import MealzUIiOSSDK
import MealziOSSDK
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import mealzcore
@available(iOS 14, *)
public func sharedCatalogActions(coordinator: MealzNaviOSSDK.CatalogFeatureNavCoordinator?, navigateToMealPlanner: (() -> Swift.Void)? = nil) -> MealziOSSDK.CatalogActions
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class CatalogViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(catalogViewOptions: MealzUIiOSSDK.CatalogViewOptions, packageRowViewOptions: MealzUIiOSSDK.CatalogPackageRowViewOptions, baseViews: MealzUIiOSSDK.BasePageViewParameters, catalogViewGridConfig: MealziOSSDK.CatalogRecipesListGridConfig, coordinator: MealzNaviOSSDK.CatalogFeatureNavCoordinator, recipeDetailsCoordinator: MealzNaviOSSDK.RecipeDetailsFeatureNavCoordinator, usesPreferences: Swift.Bool = true, catalogId: Swift.String? = nil, categoryTitle: Swift.String? = nil, navigateToMealPlanner: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@available(iOS 14, *)
public protocol MealPlannerFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var mealPlannerFormViewOptions: MealzUIiOSSDK.MealPlannerFormViewOptions { get set }
  var mealPlannerResultsViewOptions: MealzUIiOSSDK.MealPlannerResultsViewOptions { get set }
  var mealPlannerRecipePickerViewOptions: MealzUIiOSSDK.MealPlannerRecipePickerViewOptions { get set }
  var mealPlannerBasketViewOptions: MealzUIiOSSDK.MealPlannerBasketViewOptions { get set }
  var basketRecipeViewOptions: MealzUIiOSSDK.BasketRecipeViewOptions { get set }
  var mealPlannerRecapViewOptions: MealzUIiOSSDK.MealPlannerRecapViewOptions { get set }
  var filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions { get set }
  var basketRecipeGridConfig: MealziOSSDK.BasketRecipesGridConfig { get set }
  var mealPlannerRecipesListGridConfig: MealziOSSDK.MealPlannerRecipesListGridConfig { get set }
  var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  func showMealPlannerForm()
  func showMealPlannerResults()
  func showMealPlannerRecipePicker(indexOfRecipe: Swift.Int)
  func showMealPlannerBasket()
  func showMealPlannerRecap()
  func showFilters(filterInstance: mealzcore.FilterInstance)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzMealPlannerFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), mealPlannerFeatureConstructor: MealzNaviOSSDK.MealPlannerFeatureConstructor = MealPlannerFeatureConstructor())
  @objc deinit
}
@available(iOS 14, *)
public class MealPlannerFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var mealPlannerFormViewOptions: MealzUIiOSSDK.MealPlannerFormViewOptions
  public var mealPlannerResultsViewOptions: MealzUIiOSSDK.MealPlannerResultsViewOptions
  public var mealPlannerRecipePickerViewOptions: MealzUIiOSSDK.MealPlannerRecipePickerViewOptions
  public var mealPlannerBasketViewOptions: MealzUIiOSSDK.MealPlannerBasketViewOptions
  public var basketRecipeViewOptions: MealzUIiOSSDK.BasketRecipeViewOptions
  public var mealPlannerRecapViewOptions: MealzUIiOSSDK.MealPlannerRecapViewOptions
  public var filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions
  public var basketRecipeGridConfig: MealziOSSDK.BasketRecipesGridConfig
  public var mealPlannerRecipesListGridConfig: MealziOSSDK.MealPlannerRecipesListGridConfig
  public var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public var recipeDetailsCoordinator: MealzNaviOSSDK.RecipeDetailsFeatureNavCoordinator
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), mealPlannerFeatureConstructor: MealzNaviOSSDK.MealPlannerFeatureConstructor = MealPlannerFeatureConstructor())
  public func showMealPlannerForm()
  public func showMealPlannerResults()
  public func showMealPlannerRecipePicker(indexOfRecipe: Swift.Int)
  public func showMealPlannerBasket()
  public func showMealPlannerRecap()
  public func showFilters(filterInstance: mealzcore.FilterInstance)
  public func popEntireFeature()
  @objc deinit
}
@available(iOS 14, *)
public struct MealzMealPlannerFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public let coordinator: MealzNaviOSSDK.MealPlannerFeatureNavCoordinator
  public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), mealPlannerFeatureConstructor: MealzNaviOSSDK.MealPlannerFeatureConstructor = MealPlannerFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzMealPlannerFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzMealPlannerFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@available(iOS 14, *)
public struct MealPlannerFeatureConstructor {
  public var basketRecipeGridConfig: MealziOSSDK.BasketRecipesGridConfig
  public var mealPlannerRecipesListGridConfig: MealziOSSDK.MealPlannerRecipesListGridConfig
  public var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public init(baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), mealPlannerFormViewOptions: MealzUIiOSSDK.MealPlannerFormViewOptions = MealPlannerFormViewOptions(), mealPlannerResultsViewOptions: MealzUIiOSSDK.MealPlannerResultsViewOptions = MealPlannerResultsViewOptions(), mealPlannerRecipePickerViewOptions: MealzUIiOSSDK.MealPlannerRecipePickerViewOptions = MealPlannerRecipePickerViewOptions(), mealPlannerBasketViewOptions: MealzUIiOSSDK.MealPlannerBasketViewOptions = MealPlannerBasketViewOptions(), basketRecipeViewOptions: MealzUIiOSSDK.BasketRecipeViewOptions = BasketRecipeViewOptions(), mealPlannerRecapViewOptions: MealzUIiOSSDK.MealPlannerRecapViewOptions = MealPlannerRecapViewOptions(), filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions = FiltersViewOptions(), basketRecipeGridConfig: MealziOSSDK.BasketRecipesGridConfig = BasketRecipesGridConfig(), mealPlannerRecipesListGridConfig: MealziOSSDK.MealPlannerRecipesListGridConfig = MealPlannerRecipesListGridConfig(), catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = CatalogRecipesListGridConfig())
}
@available(iOS 14, *)
public struct BasketTagFeatureConstructor {
  public init(baseViews: MealzUIiOSSDK.BaseComponentViewParameters = BaseComponentViewParameters(), basketTagViewOptions: MealzUIiOSSDK.BasketTagViewOptions = BasketTagViewOptions())
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzBasketTagFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(retailerProductId: Swift.String, scrollAlignment: SwiftUI.Axis.Set = .horizontal, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), basketTagFeatureConstructor: MealzNaviOSSDK.BasketTagFeatureConstructor = BasketTagFeatureConstructor())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@available(iOS 14, *)
public protocol BasketTagFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BaseComponentViewParameters { get set }
  var basketTagViewOptions: MealzUIiOSSDK.BasketTagViewOptions { get set }
  func setBasketTag(retailerProductId: Swift.String, scrollAlignment: SwiftUI.Axis.Set)
}
@available(iOS 14, *)
public class BasketTagFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.BasketTagFeatureNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BaseComponentViewParameters
  public var basketTagViewOptions: MealzUIiOSSDK.BasketTagViewOptions
  public var viewController: UIKit.UIViewController?
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), basketTagFeatureConstructor: MealzNaviOSSDK.BasketTagFeatureConstructor = BasketTagFeatureConstructor())
  public func setBasketTag(retailerProductId: Swift.String, scrollAlignment: SwiftUI.Axis.Set)
  public func presentRecipeDetails(recipeId: Swift.String)
  @objc deinit
}
@available(iOS 14, *)
public struct MealzBasketTagFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(retailerProductId: Swift.String, scrollAlignment: SwiftUI.Axis.Set = .horizontal, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), basketTagFeatureConstructor: MealzNaviOSSDK.BasketTagFeatureConstructor = BasketTagFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzBasketTagFeatureSwiftUI.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: MealzNaviOSSDK.MealzBasketTagFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
@available(iOS 14, *)
public struct MealzMyBasketFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myBasketContructor: MealzNaviOSSDK.MyBasketFeatureConstructor)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzMyBasketFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzMyBasketFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@available(iOS 14, *)
public protocol MyBasketFeatureNavCoordinatorProtocol {
  var myBasketViewOptions: MealzUIiOSSDK.MyBasketViewOptions { get set }
  var myBasketBaseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions { get set }
  var myMealsBaseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var navigateToCatalog: () -> Swift.Void { get set }
  var navigateToCheckout: (Swift.String?) -> Swift.Void { get set }
  var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  func showMyBasket()
}
@available(iOS 14, *)
public struct MyBasketFeatureConstructor {
  public init(myBasketViewOptions: MealzUIiOSSDK.MyBasketViewOptions = MyBasketViewOptions(), myBasketBaseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions = MyMealsViewOptions(nestedOptions: NestedMyMealsViewOptions()), myMealsBaseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), myProductsViewOptions: MealzUIiOSSDK.MyProductsViewOptions = MyProductsViewOptions(), myProductsBaseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = myMealsDefaultRecipesListGridConfig, navigateToCatalog: @escaping () -> Swift.Void, navigateToCheckout: @escaping (Swift.String?) -> Swift.Void)
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzMyBasketFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myBasketContructor: MealzNaviOSSDK.MyBasketFeatureConstructor)
  @objc deinit
}
@available(iOS 14, *)
public class MyBasketFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.MyBasketFeatureNavCoordinatorProtocol {
  public var myBasketViewOptions: MealzUIiOSSDK.MyBasketViewOptions
  public var myBasketBaseViews: MealzUIiOSSDK.BasePageViewParameters
  public var myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions
  public var myMealsBaseViews: MealzUIiOSSDK.BasePageViewParameters
  public var myProductsViewOptions: MealzUIiOSSDK.MyProductsViewOptions
  public var myProductsBaseViews: MealzUIiOSSDK.BasePageViewParameters
  public var navigateToCatalog: () -> Swift.Void
  public var navigateToCheckout: (Swift.String?) -> Swift.Void
  public var recipeDetailsCoordinator: MealzNaviOSSDK.RecipeDetailsFeatureNavCoordinator
  public var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myBasketContructor: MealzNaviOSSDK.MyBasketFeatureConstructor)
  public func showMyBasket()
  @objc deinit
}
@available(iOS 14, *)
public protocol RecipeDetailsNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var recipeDetailsViewOptions: MealzUIiOSSDK.RecipeDetailsViewOptions { get set }
  var recipeDetailsProductViewOptions: MealzUIiOSSDK.RecipeDetailsProductViewOptions { get set }
  var itemSelectorViewOptions: MealzUIiOSSDK.ItemSelectorViewOptions { get set }
  func showRecipeDetails(recipeId: Swift.String, isForMealPlanner: Swift.Bool)
  func showItemSelector(ingredientId: Swift.String?, basketEntryId: Swift.String?)
  func showSponsorDetails(sponsor: mealzcore.Sponsor)
}
@available(iOS 14, *)
public struct MealzRecipeDetailsFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(hideTitles: Swift.Bool = false, recipeId: Swift.String, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzRecipeDetailsFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzRecipeDetailsFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@available(iOS 14, *)
public struct RecipeDetailsFeatureConstructor {
  public init(baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), recipeDetailsViewOptions: MealzUIiOSSDK.RecipeDetailsViewOptions = RecipeDetailsViewOptions(), recipeDetailsProductViewOptions: MealzUIiOSSDK.RecipeDetailsProductViewOptions = RecipeDetailsProductViewOptions(), itemSelectorViewOptions: MealzUIiOSSDK.ItemSelectorViewOptions = ItemSelectorViewOptions())
}
@available(iOS 14, *)
public class RecipeDetailsFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.RecipeDetailsNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var recipeDetailsViewOptions: MealzUIiOSSDK.RecipeDetailsViewOptions
  public var recipeDetailsProductViewOptions: MealzUIiOSSDK.RecipeDetailsProductViewOptions
  public var itemSelectorViewOptions: MealzUIiOSSDK.ItemSelectorViewOptions
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsFeatureConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  public func showRecipeDetails(recipeId: Swift.String, isForMealPlanner: Swift.Bool = false)
  public func setRecipeDetails(recipeId: Swift.String, isForMealPlanner: Swift.Bool = false)
  public func showItemSelector(ingredientId: Swift.String?, basketEntryId: Swift.String?)
  public func showSponsorDetails(sponsor: mealzcore.Sponsor)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzRecipeDetailsFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(recipeId: Swift.String, hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  @objc deinit
}
@available(iOS 14, *)
public class MyMealsFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.MyMealsFeatureNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions
  public var navigateToCatalog: () -> Swift.Void
  public var navigateToItemSelector: (() -> Swift.Void)?
  public var recipeDetailsCoordinator: MealzNaviOSSDK.RecipeDetailsFeatureNavCoordinator
  public var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myMealsContructor: MealzNaviOSSDK.MyMealsFeatureConstructor)
  public func showMyMeals()
  @objc deinit
}
@available(iOS 14, *)
public protocol MyMealsFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions { get set }
  var navigateToCatalog: () -> Swift.Void { get set }
  var navigateToItemSelector: (() -> Swift.Void)? { get set }
  var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  func showMyMeals()
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzMyMealsFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myMealsContructor: MealzNaviOSSDK.MyMealsFeatureConstructor)
  @objc deinit
}
@available(iOS 14, *)
public struct MealzMyMealsFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), myMealsContructor: MealzNaviOSSDK.MyMealsFeatureConstructor)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzMyMealsFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzMyMealsFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@available(iOS 14, *)
public let myMealsDefaultRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
@available(iOS 14, *)
public struct MyMealsFeatureConstructor {
  public init(baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions = MyMealsViewOptions(), catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = myMealsDefaultRecipesListGridConfig, navigateToCatalog: @escaping () -> Swift.Void, navigateToItemSelector: (() -> Swift.Void)? = nil)
}
@available(iOS 14, *)
public struct FavoritesFeatureConstructor {
  public init(baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), favoritesViewOptions: MealzUIiOSSDK.FavoritesViewOptions = FavoritesViewOptions(), catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = CatalogRecipesListGridConfig(), navigateToCatalog: @escaping () -> Swift.Void)
}
@available(iOS 14, *)
public struct MealzFavoritesFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), favoritesFeatureConstructor: MealzNaviOSSDK.FavoritesFeatureConstructor)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzFavoritesFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzFavoritesFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@available(iOS 14, *)
public protocol FavoritesFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var favoritesViewOptions: MealzUIiOSSDK.FavoritesViewOptions { get set }
  var navigateToCatalog: () -> Swift.Void { get set }
  var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  func setFavorites()
}
@available(iOS 14, *)
public class FavoritesFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.FavoritesFeatureNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var favoritesViewOptions: MealzUIiOSSDK.FavoritesViewOptions
  public var navigateToCatalog: () -> Swift.Void
  public var catalogRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), favoritesFeatureConstructor: MealzNaviOSSDK.FavoritesFeatureConstructor)
  public func setFavorites()
  public func presentRecipeDetails(recipeId: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzFavoritesFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), favoritesFeatureConstructor: MealzNaviOSSDK.FavoritesFeatureConstructor)
  @objc deinit
}
@available(iOS 14, *)
public struct MealzCatalogFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(hideTitles: Swift.Bool = false, catalogId: Swift.String? = nil, categoryTitle: Swift.String? = nil, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), catalogFeatureConstructor: MealzNaviOSSDK.CatalogFeatureConstructor = CatalogFeatureConstructor(), myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions = MyMealsViewOptions(), myMealsRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = myMealsDefaultRecipesListGridConfig, mealPlannerFeatureConstructor: MealzNaviOSSDK.MealPlannerFeatureConstructor = MealPlannerFeatureConstructor())
  public func openCatalogResults(catalogId: Swift.String?, categoryTitle: Swift.String?)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzCatalogFeatureSwiftUI.Context) -> UIKit.UINavigationController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UINavigationController, context: MealzNaviOSSDK.MealzCatalogFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UINavigationController
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzCatalogFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(hideTitles: Swift.Bool = false, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), catalogFeatureConstructor: MealzNaviOSSDK.CatalogFeatureConstructor = CatalogFeatureConstructor(), myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions = MyMealsViewOptions(), myMealsRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = myMealsDefaultRecipesListGridConfig, mealPlannerFeatureConstructor: MealzNaviOSSDK.MealPlannerFeatureConstructor = MealPlannerFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func openCatalogResults(catalogId: Swift.String?, categoryTitle: Swift.String?)
  @objc deinit
}
@available(iOS 14, *)
public struct CatalogFeatureConstructor {
  public init(useMealPlanner: Swift.Bool = false, usesPreferences: Swift.Bool = true, baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), catalogViewOptions: MealzUIiOSSDK.CatalogViewOptions = CatalogViewOptions(), recipesListViewOptions: MealzUIiOSSDK.CatalogRecipesListViewOptions = CatalogRecipesListViewOptions(), packageRowViewOptions: MealzUIiOSSDK.CatalogPackageRowViewOptions = CatalogPackageRowViewOptions(), catalogSearchViewOptions: MealzUIiOSSDK.CatalogSearchViewOptions = CatalogSearchViewOptions(), filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions = FiltersViewOptions(), preferencesViewOptions: MealzUIiOSSDK.PreferencesViewOptions = PreferencesViewOptions(), preferencesSearchViewOptions: MealzUIiOSSDK.PreferencesSearchViewOptions = PreferencesSearchViewOptions(), catalogViewGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = CatalogRecipesListGridConfig(), catalogResultsGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = CatalogRecipesListGridConfig())
}
@available(iOS 14, *)
public protocol CatalogFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var catalogViewOptions: MealzUIiOSSDK.CatalogViewOptions { get set }
  var recipesListViewOptions: MealzUIiOSSDK.CatalogRecipesListViewOptions { get set }
  var packageRowViewOptions: MealzUIiOSSDK.CatalogPackageRowViewOptions { get set }
  var catalogSearchViewOptions: MealzUIiOSSDK.CatalogSearchViewOptions { get set }
  var filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions { get set }
  var preferencesViewOptions: MealzUIiOSSDK.PreferencesViewOptions { get set }
  var preferencesSearchViewOptions: MealzUIiOSSDK.PreferencesSearchViewOptions { get set }
  var catalogViewGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  var catalogResultsGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  var myMealsRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig { get set }
  func showCatalog(catalogId: Swift.String?, categoryTitle: Swift.String?)
  func showCatalogResults(title: Swift.String?, catalogId: Swift.String?, categoryTitle: Swift.String?, isFavorite: Swift.Bool)
  func showPreferences()
  func showPreferencesSearch()
  func showFilters(filterInstance: mealzcore.FilterInstance)
  func showCatalogSearch(filterInstance: mealzcore.FilterInstance)
}
@available(iOS 14, *)
public class CatalogFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.CatalogFeatureNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var catalogViewOptions: MealzUIiOSSDK.CatalogViewOptions
  public var recipesListViewOptions: MealzUIiOSSDK.CatalogRecipesListViewOptions
  public var packageRowViewOptions: MealzUIiOSSDK.CatalogPackageRowViewOptions
  public var catalogSearchViewOptions: MealzUIiOSSDK.CatalogSearchViewOptions
  public var filtersViewOptions: MealzUIiOSSDK.FiltersViewOptions
  public var preferencesViewOptions: MealzUIiOSSDK.PreferencesViewOptions
  public var preferencesSearchViewOptions: MealzUIiOSSDK.PreferencesSearchViewOptions
  public var myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions
  public var navigateToCatalog: () -> Swift.Void
  public var mealPlannerCoordinator: MealzNaviOSSDK.MealPlannerFeatureNavCoordinator?
  public var recipeDetailsCoordinator: MealzNaviOSSDK.RecipeDetailsFeatureNavCoordinator
  public var catalogViewGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public var catalogResultsGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public var myMealsRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), catalogFeatureConstructor: MealzNaviOSSDK.CatalogFeatureConstructor = CatalogFeatureConstructor(), myMealsViewOptions: MealzUIiOSSDK.MyMealsViewOptions = MyMealsViewOptions(), myMealsRecipesListGridConfig: MealziOSSDK.CatalogRecipesListGridConfig = myMealsDefaultRecipesListGridConfig, mealPlannerCoordinator: MealzNaviOSSDK.MealPlannerFeatureNavCoordinator? = nil)
  public func showCatalog(catalogId: Swift.String? = nil, categoryTitle: Swift.String? = nil)
  public func showCatalogResultsFromSideView(title: Swift.String?, catalogId: Swift.String? = nil, categoryTitle: Swift.String? = nil)
  public func showCatalogResults(title: Swift.String? = nil, catalogId: Swift.String? = nil, categoryTitle: Swift.String? = nil, isFavorite: Swift.Bool = false)
  public func showPreferences()
  public func showPreferencesSearch()
  public func showFilters(filterInstance: mealzcore.FilterInstance)
  public func showCatalogSearch(filterInstance: mealzcore.FilterInstance)
  public func showMyMeals()
  @objc deinit
}
@available(iOS 14, *)
public class RecipeCarouselFeatureNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.RecipeCarouselFeatureNavCoordinatorProtocol {
  public var baseViews: MealzUIiOSSDK.BasePageViewParameters
  public var recipeCarouselViewOptions: MealzUIiOSSDK.RecipeCarouselViewOptions
  public var viewController: UIKit.UIViewController?
  public var recipesCarouselGridConfig: MealziOSSDK.RecipesCarouselGridConfig
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCarouselFeatureConstructor: MealzNaviOSSDK.RecipeCarouselFeatureConstructor)
  public func setRecipeCarousel(productId: Swift.String, numberOfResults: Swift.Int)
  public func setRecipeCarousel(criteria: mealzcore.SuggestionsCriteria, numberOfResults: Swift.Int)
  public func presentRecipeDetails(recipeId: Swift.String)
  @objc deinit
}
@available(iOS 14, *)
public struct MealzRecipeCarouselFeatureSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(productId: Swift.String, numberOfResults: Swift.Int, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCarouselFeatureConstructor: MealzNaviOSSDK.RecipeCarouselFeatureConstructor = RecipeCarouselFeatureConstructor())
  public init(criteria: mealzcore.SuggestionsCriteria, numberOfResults: Swift.Int, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCarouselFeatureConstructor: MealzNaviOSSDK.RecipeCarouselFeatureConstructor = RecipeCarouselFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzRecipeCarouselFeatureSwiftUI.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: MealzNaviOSSDK.MealzRecipeCarouselFeatureSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
@available(iOS 14, *)
public protocol RecipeCarouselFeatureNavCoordinatorProtocol {
  var baseViews: MealzUIiOSSDK.BasePageViewParameters { get set }
  var recipeCarouselViewOptions: MealzUIiOSSDK.RecipeCarouselViewOptions { get set }
  var recipesCarouselGridConfig: MealziOSSDK.RecipesCarouselGridConfig { get set }
  func setRecipeCarousel(productId: Swift.String, numberOfResults: Swift.Int)
  func setRecipeCarousel(criteria: mealzcore.SuggestionsCriteria, numberOfResults: Swift.Int)
}
@available(iOS 14, *)
public struct RecipeCarouselFeatureConstructor {
  public init(baseViews: MealzUIiOSSDK.BasePageViewParameters = BasePageViewParameters(), recipeCarouselViewOptions: MealzUIiOSSDK.RecipeCarouselViewOptions = RecipeCarouselViewOptions(), recipesCarouselGridConfig: MealziOSSDK.RecipesCarouselGridConfig = RecipesCarouselGridConfig())
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzRecipeCarouselFeatureUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(productId: Swift.String, numberOfResults: Swift.Int, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCarouselFeatureConstructor: MealzNaviOSSDK.RecipeCarouselFeatureConstructor = RecipeCarouselFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public init(criteria: mealzcore.SuggestionsCriteria, numberOfResults: Swift.Int, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCarouselFeatureConstructor: MealzNaviOSSDK.RecipeCarouselFeatureConstructor = RecipeCarouselFeatureConstructor())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@available(iOS 14, *)
public struct StandaloneRecipeCardConstructor {
  public init(recipeCard: MealziOSSDK.TypeSafeCatalogRecipeCard = TypeSafeCatalogRecipeCard(MealzRecipeCard()), recipeCardLoading: MealziOSSDK.TypeSafeRecipeCardLoading = TypeSafeRecipeCardLoading(MealzRecipeCardLoading()), recipeCardDimensions: CoreFoundation.CGSize = CGSize(width: 360, height: 300))
}
@objc @_hasMissingDesignatedInitializers @available(iOS 14, *)
@_Concurrency.MainActor(unsafe) public class MealzStandaloneRecipeCardUIKit : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public init(recipeId: Swift.String, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor())
  @_Concurrency.MainActor(unsafe) public init(recipe: mealzcore.Recipe, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor())
  @_Concurrency.MainActor(unsafe) public init(criteria: mealzcore.SuggestionsCriteria, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor())
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
}
@available(iOS 14, *)
public protocol StandaloneRecipeCardNavCoordinatorProtocol {
  var recipeCard: MealziOSSDK.TypeSafeCatalogRecipeCard { get set }
  var recipeCardLoading: MealziOSSDK.TypeSafeRecipeCardLoading { get set }
  var recipeCardDimensions: CoreFoundation.CGSize { get set }
  func showRecipeCard(recipeId: Swift.String)
  func showRecipeCard(recipe: mealzcore.Recipe)
  func showRecipeCard(criteria: mealzcore.SuggestionsCriteria)
}
public struct MealzNaviOSSDKBundle {
  public init()
  public static var bundle: Foundation.Bundle {
    get
  }
}
@available(iOS 14, *)
public struct MealzStandaloneRecipeCardSwiftUI : SwiftUI.UIViewControllerRepresentable {
  public init(recipeId: Swift.String, recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor(), recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  public init(recipe: mealzcore.Recipe, recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor(), recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  public init(criteria: mealzcore.SuggestionsCriteria, recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor(), recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor())
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: MealzNaviOSSDK.MealzStandaloneRecipeCardSwiftUI.Context) -> UIKit.UIViewController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIViewController, context: MealzNaviOSSDK.MealzStandaloneRecipeCardSwiftUI.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIViewController
}
@available(iOS 14, *)
public class StandaloneRecipeCardNavCoordinator : MealzNaviOSSDK.MealzBaseNavCoordinator, MealzNaviOSSDK.StandaloneRecipeCardNavCoordinatorProtocol {
  public var recipeCard: MealziOSSDK.TypeSafeCatalogRecipeCard
  public var recipeCardLoading: MealziOSSDK.TypeSafeRecipeCardLoading
  public var recipeCardDimensions: CoreFoundation.CGSize
  public var viewController: UIKit.UIViewController?
  public init(baseConstructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor, recipeDetailsConstructor: MealzNaviOSSDK.RecipeDetailsFeatureConstructor = RecipeDetailsFeatureConstructor(), recipeCardConstructor: MealzNaviOSSDK.StandaloneRecipeCardConstructor = StandaloneRecipeCardConstructor())
  public func showRecipeCard(recipeId: Swift.String)
  public func showRecipeCard(recipe: mealzcore.Recipe)
  public func showRecipeCard(criteria: mealzcore.SuggestionsCriteria)
  public func presentRecipeDetails(recipeId: Swift.String, isForMealPlanner: Swift.Bool = false)
  @objc deinit
}
@available(iOS 14, *)
public protocol BaseNavCoordinatorProtocol {
  var navigationController: UIKit.UINavigationController { get set }
  func goBack()
}
@available(iOS 14, *)
public class MealzBaseNavCoordinator : MealzNaviOSSDK.BaseNavCoordinatorProtocol {
  public var navigationController: UIKit.UINavigationController
  public struct Constructor {
    public init(navigationController: UIKit.UINavigationController)
  }
  public init(constructor: MealzNaviOSSDK.MealzBaseNavCoordinator.Constructor)
  public func goBack()
  @objc deinit
}
